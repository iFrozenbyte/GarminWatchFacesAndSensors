using Toybox.WatchUi 	as Ui;
using Toybox.Graphics 	as Gfx;
using Toybox.System 	as Sys;
using Toybox.Lang 		as Lang;
using Toybox.Time;

class prostObzorView extends Ui.WatchFace {
    var customFont;
    var customFont1;
    var hourHandAngle;
	var minuteHandAngle;
	var screenCenterPoint;
	var btry;
	var sms;
	var bth;
	var clockTime = Sys.getClockTime();
	var radius, centerX, centerY, minX, minY, maxX, maxY, isAwake;
	const ANGLE_INCREMENT = Math.PI / 30.0;
	var dayWeek;
    
    function initialize() {
        WatchFace.initialize();
    }
    
    function onLayout(dc) {
        sms = Ui.loadResource(Rez.Drawables.sms);
        bth = Ui.loadResource(Rez.Drawables.btooth);
        customFont1 = Ui.loadResource(Rez.Fonts.customFont1);
        minX = 0;
    	maxX = dc.getWidth();
    	minY = 0;
    	maxY = dc.getHeight();
    	
    	// for now work with a sq screen rather than rectangle
    	minX = ( maxX - maxY ) / 2;
    	maxX = minX + maxY;
        centerX = ( ( maxX - minX ) / 2 ) + minX;
        centerY = ( ( maxY - minY ) / 2 ) + minY;
        radius = centerX > centerY ? centerY : centerX;
    }
    
    function generateHandCoordinates(centerPoint, angle, handLength, tailLength, width) {
        // Map out the coordinates of the watch hand
        var coords = [[-(width / 2), tailLength], [-(width / 2), -handLength], [width / 2, -handLength], [width / 2, tailLength]];
        var result = new [4];
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);

        // Transform the coordinates
        for (var i = 0; i < 4; i += 1) {
            var x = (coords[i][0] * cos) - (coords[i][1] * sin) + 0.5;
            var y = (coords[i][0] * sin) + (coords[i][1] * cos) + 0.5;

            result[i] = [centerPoint[0] + x, centerPoint[1] + y];
        }

        return result;
    }

    // Update the view
    function onUpdate(dc) {
        
        var timeString 			= Lang.format("$1$:$2$",[clockTime.hour.format("%02d"), clockTime.min.format("%02d")]);
        var butteryStat 		= Sys.getSystemStats().battery.toNumber() + "%";
        var devSet 				= Sys.getDeviceSettings();
        screenCenterPoint 		= [dc.getWidth()/2, dc.getHeight()/2];
		var notif 				= devSet.notificationCount;				
		var batteryPercent    	= Sys.getSystemStats().battery;
		var blueTooth 			= devSet.phoneConnected;
		var info 				= Time.Gregorian.info(Time.now(), Time.FORMAT_MEDIUM);
        var date 				= Lang.format("$01$, $02$", [info.day_of_week, info.day.format("%02d")]);  
		var screenRes 			= Sys.getDeviceSettings().screenWidth;  // 218  for 3 series  AND for 5 series is 240;
		
		dc.clear();
//******************************* 218 *************************        
        if(screenRes == 218){
        	dc.setColor(Gfx.COLOR_RED, Gfx.COLOR_TRANSPARENT);
        	dc.fillCircle(dc.getWidth()/2, dc.getHeight()/2, 118);        
        	dc.setColor(Gfx.COLOR_WHITE, Gfx.COLOR_TRANSPARENT);
        	dc.fillCircle(dc.getWidth()/2, dc.getHeight()/2, 80);        
        	dc.setColor(Gfx.COLOR_BLACK, Gfx.COLOR_TRANSPARENT);
        	dc.fillRectangle((dc.getWidth()/2 - 7), (dc.getHeight()/2 - 7), 14, 14);
        
        	dc.setColor(Gfx.COLOR_WHITE, Gfx.COLOR_TRANSPARENT);
        	dc.drawText(98,  6,   Gfx.FONT_SMALL,  "12", Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(193, 94,  Gfx.FONT_SMALL,  "3",  Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(104, 184, Gfx.FONT_SMALL,  "6",  Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(15,  94,  Gfx.FONT_SMALL,  "9",  Gfx.TEXT_JUSTIFY_LEFT);
        
        	dc.drawText(24,  49,   Gfx.FONT_TINY,   "10", Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(54,  20,   Gfx.FONT_TINY,   "11", Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(159, 20,   Gfx.FONT_TINY,   "1",  Gfx.TEXT_JUSTIFY_RIGHT);
        	dc.drawText(189, 49,   Gfx.FONT_TINY,   "2",  Gfx.TEXT_JUSTIFY_RIGHT);
        	dc.drawText(189, 145,  Gfx.FONT_TINY,   "4",  Gfx.TEXT_JUSTIFY_RIGHT);
        	dc.drawText(159, 175,  Gfx.FONT_TINY,   "5",  Gfx.TEXT_JUSTIFY_RIGHT);
        	dc.drawText(59,  175,  Gfx.FONT_TINY,   "7",  Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(30,  145,  Gfx.FONT_TINY,   "8",  Gfx.TEXT_JUSTIFY_LEFT);
        	
        	drawArrows(dc);
        	
        	dc.setColor(Gfx.COLOR_DK_GRAY, Gfx.COLOR_TRANSPARENT);
        	dc.drawText(132, 160, Gfx.FONT_SYSTEM_TINY, butteryStat, Gfx.TEXT_JUSTIFY_CENTER);
        	
        	// drawNotifications
        	if(notif != 0){
        		dc.drawBitmap(140, 80, sms);
        		dc.drawText(172, 75, Gfx.FONT_SYSTEM_TINY, notif, Gfx.TEXT_JUSTIFY_CENTER);
        	}
        	
        	// drawDate
        	dc.drawText(65, 75, Gfx.FONT_SYSTEM_TINY, date, Gfx.TEXT_JUSTIFY_CENTER); 
        	
        	// drawBattery
        	if(batteryPercent >= 50){
        		dc.setColor(Gfx.COLOR_GREEN, Gfx.COLOR_TRANSPARENT);
        	}else if (batteryPercent < 50 && batteryPercent >= 26){
        		dc.setColor(Gfx.COLOR_YELLOW, Gfx.COLOR_TRANSPARENT);
        	}else {
        		dc.setColor(Gfx.COLOR_RED, Gfx.COLOR_TRANSPARENT);
        	}
        	dc.fillRectangle(dc.getWidth()/2 - 16, 168, 25 * (batteryPercent/125), 10);
        	
        	dc.setColor(Gfx.COLOR_DK_GRAY, Gfx.COLOR_TRANSPARENT);
        	dc.drawRectangle(dc.getWidth()/2 - 17, 167, 22, 12);
        	dc.fillRectangle(dc.getWidth()/2+4, 168, 2, 9);
        	       	
        	// drawGigitalTime
        	dc.setColor(Gfx.COLOR_RED, Gfx.COLOR_TRANSPARENT);
        	dc.drawText(dc.getWidth()/2, 114, customFont1, timeString, Gfx.TEXT_JUSTIFY_CENTER);
        	
 //************************* START OF 240 *****************************       	
        } else if (screenRes == 240){
        	dc.setColor(Gfx.COLOR_RED, Gfx.COLOR_TRANSPARENT);
        	dc.fillCircle(dc.getWidth()/2, dc.getHeight()/2, 130);        
        	dc.setColor(Gfx.COLOR_WHITE, Gfx.COLOR_TRANSPARENT);
        	dc.fillCircle(dc.getWidth()/2, dc.getHeight()/2, 88);        
        	dc.setColor(Gfx.COLOR_BLACK, Gfx.COLOR_TRANSPARENT);
        	dc.fillRectangle((dc.getWidth()/2 - 7), (dc.getHeight()/2 - 7), 14, 14);
        
        	dc.setColor(Gfx.COLOR_WHITE, Gfx.COLOR_TRANSPARENT);
        	
        	dc.drawText(108,  6,  Gfx.FONT_SMALL,   "12", Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(213, 105, Gfx.FONT_SMALL,   "3", Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(114, 203, Gfx.FONT_SMALL,   "6", Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(15,  105, Gfx.FONT_SMALL,   "9", Gfx.TEXT_JUSTIFY_LEFT);
        	
        	dc.drawText(23,  55,   Gfx.FONT_TINY,   "10", Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(58,  21,   Gfx.FONT_TINY,   "11", Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(173, 21,   Gfx.FONT_TINY,   "1",  Gfx.TEXT_JUSTIFY_RIGHT);
        	dc.drawText(208, 55,   Gfx.FONT_TINY,   "2",  Gfx.TEXT_JUSTIFY_RIGHT);
        	dc.drawText(208, 156,  Gfx.FONT_TINY,   "4",  Gfx.TEXT_JUSTIFY_RIGHT);
        	dc.drawText(175, 191,  Gfx.FONT_TINY,   "5",  Gfx.TEXT_JUSTIFY_RIGHT);
        	dc.drawText(65,  193,  Gfx.FONT_TINY,   "7",  Gfx.TEXT_JUSTIFY_LEFT);
        	dc.drawText(31,  156,  Gfx.FONT_TINY,   "8",  Gfx.TEXT_JUSTIFY_LEFT);
        	
        	drawArrows(dc);
        	
        	dc.setColor(Gfx.COLOR_DK_GRAY, Gfx.COLOR_TRANSPARENT);
        	dc.drawText(143, 176, Gfx.FONT_SYSTEM_TINY, butteryStat, Gfx.TEXT_JUSTIFY_CENTER);
        	
        	// drawNotifications
        	if(notif != 0){
        		dc.drawBitmap(152, 82, sms);
        		dc.drawText(186, 74, Gfx.FONT_SYSTEM_TINY, notif, Gfx.TEXT_JUSTIFY_CENTER);
        	} 
        	
        	// drawDate
        	dc.drawText(75, 75, Gfx.FONT_SYSTEM_TINY, date, Gfx.TEXT_JUSTIFY_CENTER);      
        	
        	// drawBattery
        	if(batteryPercent >= 50){
        		dc.setColor(Gfx.COLOR_GREEN, Gfx.COLOR_TRANSPARENT);
        	}else if (batteryPercent < 50 && batteryPercent >= 26){
        		dc.setColor(Gfx.COLOR_YELLOW, Gfx.COLOR_TRANSPARENT);
        	}else {
        		dc.setColor(Gfx.COLOR_RED, Gfx.COLOR_TRANSPARENT);
        	}
        	dc.fillRectangle(dc.getWidth()/2 - 19, 185, 25 * (batteryPercent/125), 11);
        	
        	dc.setColor(Gfx.COLOR_DK_GRAY, Gfx.COLOR_TRANSPARENT);
        	dc.drawRectangle(dc.getWidth()/2 - 20, 184, 22, 13);
        	dc.fillRectangle(dc.getWidth()/2, 186, 3, 9);
        	
        	// drawGigitalTime
        	dc.setColor(Gfx.COLOR_RED, Gfx.COLOR_TRANSPARENT);
        	dc.drawText(dc.getWidth()/2, 125, customFont1, timeString, Gfx.TEXT_JUSTIFY_CENTER);        	  	
        }       
//**************************  END OF 240  *********************************

        // bluetooth
        if (blueTooth == true){
        	dc.drawBitmap(dc.getWidth() / 2 - 6, 35, bth);
        }
        drawDial(dc);
    }

    function drawDial(dc) {
    	var edgePt, innerPt, innerPtRadius;
    	var angle = 0;
    	
    	dc.setColor(Gfx.COLOR_BLACK, Gfx.COLOR_BLACK);

    	for (var i = 0; i < 60; i++) {
    		dc.setPenWidth(2);
    		innerPtRadius = radius - 3;
    		if ( 0 == i % 5 ) {
    			dc.setPenWidth(4);
    			innerPtRadius = radius - 10;
    		}
    		edgePt  = getPointOnCircle(angle, radius);
    		innerPt = getPointOnCircle( angle, innerPtRadius );
    		dc.drawLine(edgePt[0], edgePt[1],innerPt[0], innerPt[1]);
    		angle += ANGLE_INCREMENT;
    	}
    }
    
    function getPointOnCircle(angle, radius) {
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);
        var pointX = centerX + (sin * radius);
        var pointY = centerY - (cos * radius);
    	return [pointX, pointY];
    }
    
    function drawArrows(dc){    	
    	// hour
        dc.setColor(Gfx.COLOR_BLACK, Gfx.COLOR_TRANSPARENT);
        hourHandAngle = (((clockTime.hour % 12) * 60) + clockTime.min);
        hourHandAngle = hourHandAngle / (12 * 60.0);
        hourHandAngle = hourHandAngle * Math.PI * 2;  
        dc.fillPolygon(generateHandCoordinates(screenCenterPoint, hourHandAngle, 55, 0, 6));
        
       	// minute
       	minuteHandAngle = (clockTime.min / 60.0) * Math.PI * 2;
       	dc.setColor(Gfx.COLOR_BLACK, Gfx.COLOR_TRANSPARENT);
       	dc.fillPolygon(generateHandCoordinates(screenCenterPoint, minuteHandAngle, 92, 0, 2));
    }
}
