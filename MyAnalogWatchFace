using Toybox.WatchUi as Ui;
using Toybox.Graphics as Gfx;
using Toybox.System as Sys;
using Toybox.Lang as Lang;
using Toybox.Math as Math;

class myAnalogWatchView extends Ui.WatchFace {

	var hourHandAngle;
	var minuteHandAngle;
	

    function initialize() {
        WatchFace.initialize();
    }

    // Загрузка ресурсов
    function onLayout(dc) {                
    }
    
    function generateHandCoordinates(centerPoint, angle, handLength, tailLength, width) {
        // Планирование часовой стрелки
        var coords = [[-(width / 2), tailLength], [-(width / 2), -handLength], [width / 2, -handLength], [width / 2, tailLength]];
        var result = new [4];
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);

        // Изменение координат
        for (var i = 0; i < 4; i += 1) {
            var x = (coords[i][0] * cos) - (coords[i][1] * sin) + 0.5;
            var y = (coords[i][0] * sin) + (coords[i][1] * cos) + 0.5;

            result[i] = [centerPoint[0] + x, centerPoint[1] + y];
        }

        return result;
    }

    // Update the view
    function onUpdate(dc) {		
		
		var clockTime = System.getClockTime();
		var screenCenterPoint = [dc.getWidth()/2, dc.getHeight()/2];
		View.onUpdate(dc);
		
		dc.setColor(Gfx.COLOR_BLUE, Gfx.COLOR_TRANSPARENT);
      	dc.fillCircle(60, 100, 10);
		
		//Use white to draw the hour and minute hands
        dc.setColor(Graphics.COLOR_ORANGE, Graphics.COLOR_TRANSPARENT);

        // Отрисовка часовой стрелки. Конвертация в минуты и вычисление угла
        hourHandAngle = (((clockTime.hour % 12) * 60) + clockTime.min);
        hourHandAngle = hourHandAngle / (12 * 60.0);
        hourHandAngle = hourHandAngle * Math.PI * 2;

        dc.fillPolygon(generateHandCoordinates(screenCenterPoint, hourHandAngle, 70, 0, 6));

        // Отрисовка минутной стрелки
        minuteHandAngle = (clockTime.min / 60.0) * Math.PI * 2;
        dc.fillPolygon(generateHandCoordinates(screenCenterPoint, minuteHandAngle, 90, 0, 2));

        // Отрисовка оси в центре экрана
        dc.setColor(Graphics.COLOR_LT_GRAY, Graphics.COLOR_BLACK);
        dc.fillCircle(dc.getWidth() / 2, dc.getHeight() / 2, 7);
        dc.setColor(Graphics.COLOR_BLACK,Graphics.COLOR_BLACK);
        dc.drawCircle(dc.getWidth() / 2, dc.getHeight() / 2, 7);

        // Отрисовка 3, 6, 9, и 12 часовых меток.
        dc.setColor(Graphics.COLOR_WHITE, Graphics.COLOR_TRANSPARENT);
        dc.drawText((dc.getWidth() / 2), 2, Gfx.FONT_MEDIUM, "12", Graphics.TEXT_JUSTIFY_CENTER);
        dc.drawText(dc.getWidth() - 2, (dc.getHeight() / 2) - 15, Gfx.FONT_MEDIUM, "3", Graphics.TEXT_JUSTIFY_RIGHT);
        dc.drawText(dc.getWidth() / 2, dc.getHeight() - 30, Gfx.FONT_MEDIUM, "6", Graphics.TEXT_JUSTIFY_CENTER);
        dc.drawText(2, (dc.getHeight() / 2) - 15, Gfx.FONT_MEDIUM, "9", Graphics.TEXT_JUSTIFY_LEFT);
		
		/*min_angle  -= ANGLE_ADJUST;
		hour_angle -= ANGLE_ADJUST;		
		
		dc.setColor(Gfx.COLOR_BLUE, Gfx.COLOR_TRANSPARENT);
      	dc.fillCircle(60, 100, 10);
      	dc.fillPolygon();
		
		// Минуты
		dc.drawLine(center_x, center_y,(center_x + min_radius * Math.cos(min_angle)), center_y + min_radius * Math.sin(min_angle));
		
		// Часы
		dc.drawLine(center_x, center_y,(center_x + hour_radius * Math.cos(hour_angle)), center_y + hour_radius * Math.sin(hour_angle));
		
		
        // Call the parent onUpdate function to redraw the layout
        //View.onUpdate(dc);*/
    }
}
